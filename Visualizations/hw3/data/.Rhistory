X, _ = make_circles(n_samples= 1000, random_state=1, noise=0.1, factor=0.2)
plt.scatter(x=X[:,0], y=X[:,1])
plt.show()
X, _ = make_circles(n_samples= 1000, random_state=1, noise=0.1, factor=0.05)
plt.scatter(x=X[:,0], y=X[:,1])
plt.show()
X, _ = make_circles(n_samples= 1000, random_state=1, noise=0.1, factor=0.1)
sns.scatterplot(x=X[:,0], y=X[:,1])
plt.show()
kpca = KernelPCA(kernel='rbf', gamma=15, n_components=1)
x_kpca = kpca.fit_transform(X)
x_kpca.shape
from sklearn.datasets import make_moons
X, y = make_moons(n_samples=500, noise=0.2, random_state=1234)
plt.scatter(X[:,0], y[:1], c=y)
plt.scatter(X[:,0], y[:,1], c=y)
X, y = make_moons(n_samples = 500, noise = 0.02, random_state = 417)
plt.scatter(X[:, 0], X[:, 1], c = y)
plt.show()
dev.off()
# Clear Namespace
rm(list=ls())
# Create Dataset
A <- c(117.1, 121.3, 127.8, 121.9, 117.4, 124.5, 119.5, 115.1)
B <- c(123.5, 125.3, 126.5, 127.9, 122.1, 125.6, 129.8, 117.2)
dat <- data.frame(weight = c(A,B),
company = rep(c("A","B"), each=8))
# Generate Box Plot
boxplot(weight ~ company, data = dat)
# Run Wilcoxon Rank Sum Test
wilcox.test(weight ~ company, data = dat)
head(dat)
rt.data
rm(list=ls())
dev.off(dev.list()["RStudioGD"])
# IMPORT LIBRARIES
library(ggplot2)
library(DBI)
# Instantiate Connection to DB -------------------------
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "yde2xj08jm.database.windows.net",
Database = "SwyfftAnalyticsCentral",
UID = "AnalyticsReadOnly ",
PWD = rstudioapi::askForPassword("Database password"),
port = 1433)
# Load Data ---------------------------------------------
rt.data <- dbGetQuery(con, '
SELECT [PolicyNumber], "Response Time"
FROM [dataiku].[PROFITABILITYCORE_frt_score_api_details_final]')
rt.data
# Clearn Namespace & Plots ------------------------------
rm(list=ls())
dev.off(dev.list()["RStudioGD"])
# IMPORT LIBRARIES
library(ggplot2)
library(DBI)
# Instantiate Connection to DB -------------------------
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "yde2xj08jm.database.windows.net",
Database = "SwyfftAnalyticsCentral",
UID = "AnalyticsReadOnly ",
PWD = rstudioapi::askForPassword("Database password"),
port = 1433)
# Load Data ---------------------------------------------
rt.data <- dbGetQuery(con, '
SELECT [PolicyNumber], "Response Time"
FROM [dataiku].[PROFITABILITYCORE_frt_score_api_details_final]')
rt.data
# Load Data ---------------------------------------------
rt.data <- dbGetQuery(con, '
SELECT * FROM [dbo].[chris_core_claims_reclassification_manual_with_claim_type]')
rt.data <- dbGetQuery(con, '
SELECT * FROM [dbo].[chris_core_claims_reclassification_manual_with_claim_type]')
rt.data
rt.data <- dbGetQuery(con, '
SELECT * FROM [dbo].[chris_core_claims_reclassification_manual_with_claim_type]')
# Load Data ---------------------------------------------
rt.data <- dbGetQuery(con, '
SELECT [CLAIM_NBR/RES_NBR]
,[CLAIM_TYPE]
,[Claim_Type_Coverage_Group]
,[COVERAGE]
,[CAUSE_OF_LOSS]
,[PERIL]
,[SUB_PERIL]
,[ACC_DESC]
,[Covid_Flag]
FROM [dbo].[chris_core_claims_reclassification_manual_with_claim_type]')
# Load Data ---------------------------------------------
rt.data <- dbGetQuery(con, '
SELECT
CAST([CLAIM_NBR/RES_NBR] AS nvarchar(100))
,CAST([CLAIM_TYPE] AS varchar(100))
,CAST([Claim_Type_Coverage_Group] AS varchar(100))
,CAST([COVERAGE] AS varchar(100))
,CAST([CAUSE_OF_LOSS] AS varchar(100))
,CAST([PERIL] AS varchar(100))
,CAST([SUB_PERIL] AS varchar(100))
,CAST([ACC_DESC]AS varchar(250))
,[Covid_Flag]
FROM [dbo].[chris_core_claims_reclassification_manual_with_claim_type]')
require(XML)
install.packages('XML')
require(XML)
require(XML)
help(xmlTreeParse)
# Create Step Plot --------------------------------------------------
data("AirPassengers")
air <- AirPassengers
# Create Step Plot --------------------------------------------------
data("AirPassengers")
# Create Step Plot --------------------------------------------------
data("BJsales")
# Create Step Plot --------------------------------------------------
data("BJsales")
# Create Step Plot --------------------------------------------------
data()
# Create Step Plot --------------------------------------------------
data(AirPassengers)
head(AirPassengers)
length(AirPassengers)
seq(length(AirPassengers))
x.vals <- seq(length(AirPassengers))
# Create Step Plot --------------------------------------------------
y.values = data(AirPassengers)
y.vals <- AirPassengers
x.vals <- seq(length(AirPassengers))
plot(x.vals, y.vals)
plot(x.vals, y.vals, type='s')
plot(x.vals, type='hist')
hist(x.vals)
hist(x.vals, bins=10)
hist(x.vals, bins=10)
hist(x.vals, bins=100)
hist(x.vals, bins=5)
warnings()
help(hist)
help(hist, breaks=10)
hist(x.vals, breaks=10)
hist(x.vals, breaks=15)
hist(y.vals, breaks=15)
hist(y.vals, breaks=10)
hist(y.vals, breaks=10)
# Step 1 - create a sample from a normal distributoin with known mu and sigma2
my = <- 20; sigma.2 <- 4; set.seed(33)
# Step 1 - create a sample from a normal distributoin with known mu and sigma2
my <- 20; sigma.2 <- 4; set.seed(33)
# Step 1 - create a sample from a normal distributoin with known mu and sigma2
mu <- 20; sigma.2 <- 4; set.seed(33)
# Clear namespace and plots
rm(list=ls())
dev.off()
# Step 1 - create a sample from a normal distributoin with known mu and sigma2
mu <- 20; sigma.2 <- 4; set.seed(33)
X <- rnomr(100, mu, sqrt(sigma.2))
X <- rnorm(100, mu, sqrt(sigma.2))
hist(X)
X <- rnorm(1000, mu, sqrt(sigma.2))
hist(X)
qqnorm(X)
# Step 2 - Define L According to equation 9.2, which is for the normal distribution
log.L <- function(mu.hat = 15, simga2.hat = 6){
n <- length(X)
n/2 * log(2 * pi * sigma.2.hat) +
1/2 * sum((X - mu.hat)^2 / sigma.2.hat)
}
# Step 2 - Define L According to equation 9.2, which is for the normal distribution
log.L <- function(mu.hat = 15, simga2.hat = 6){
n <- length(X)
n/2 * log(2 * pi * sigma.2.hat) + 1/2 * sum((X - mu.hat)^2 / sigma.2.hat)
}
# Step3 - Use MLE Function from the Stats Packages
library(stats4)
(fit <- mle(log.L))
# Step 2 - Define L According to equation 9.2, which is for the normal distribution
log.L <- function(mu.hat = 15, simga.2.hat = 6){
n <- length(X)
n/2 * log(2 * pi * sigma.2.hat) + 1/2 * sum((X - mu.hat)^2 / sigma.2.hat)
}
# Step3 - Use MLE Function from the Stats Packages
library(stats4)
(fit <- mle(log.L))
log.L <- function(mu.hat = 15, simga.2.hat = 6){
n <- length(X)
n/2 * log(2 * pi * sigma.2.hat) + 1/2 * sum((X - mu.hat)^2 / sigma.2.hat)
}
# Step3 - Use MLE Function from the Stats Packages
library(stats4)
(fit <- mle(log.L))
# Step 2 - Define L According to equation 9.2, which is for the normal distribution
log.L <- function(mu.hat = 15, sigma.2.hat = 6){
n <- length(X)
n/2 * log(2 * pi * sigma.2.hat) + 1/2 * sum((X - mu.hat)^2 / sigma.2.hat)
}
# Step3 - Use MLE Function from the Stats Packages
library(stats4)
(fit <- mle(log.L))
X <- rnorm(100, mu, sqrt(sigma.2))
hist(X)    # hist plot
qqnorm(X)  # qq plot
log.L <- function(mu.hat = 15, sigma.2.hat = 6){
n <- length(X)
n/2 * log(2 * pi * sigma.2.hat) + 1/2 * sum((X - mu.hat)^2 / sigma.2.hat)
}
# Step3 - Use MLE Function from the Stats Packages
library(stats4)
(fit <- mle(log.L))
fit <- mle(log.L)
summary(fit)
f = makeFun(x^2+y~x&y)
library(mosaic)
install.packages(mosaic)
install.packages('mosaic')
library(makeFun)
library(mosaic)
f = makeFun(x^2+y~x&y)
print(f)
g = makeFun(x^2 - y^2 ~x&y)
print(g)
# Plot Objective Function
plotFun(f(x,y)~x&y)
# Plot Objective Function
plotFun(f(x,y)~x&y, x.lim=range(0,10), y.lim=range(0,10))
# Plot Objective Function
plotFun(f(x,y)~x&y, x.lim=range(-10,10), y.lim=range(-10,10))
# Not Plot the Constraint
plotFun(g(x,y)~x&y, levels=1, x.lim=range(-10,10), y.lim=range(-10,10)), filled=FALSE, add=TRUE,
color='red')
# Not Plot the Constraint
plotFun(g(x,y)~x&y, levels=1, x.lim=range(-10,10), y.lim=range(-10,10)), filled=FALSE, add=TRUE, color='red')
# Not Plot the Constraint
plotFun(g(x,y)~x&y, levels=1, x.lim=range(-10,10), y.lim=range(-10,10), filled=FALSE, add=TRUE, color='red')
# Plot Objective Function
plotFun(f(x,y)~x&y, x.lim=range(-10,10), y.lim=range(-10,10), filled=FALSE)
# Not Plot the Constraint
plotFun(g(x,y)~x&y, levels=1, x.lim=range(-10,10), y.lim=range(-10,10), filled=FALSE, add=TRUE, color='red')
dev.off()
# Plot Objective Function
plotFun(f(x,y)~x&y, x.lim=range(-2,2), y.lim=range(-2,2), filled=FALSE)
# Not Plot the Constraint
plotFun(g(x,y)~x&y, levels=1, filled=FALSE, add=TRUE, color='red')
install.packages("ggmap")
library("ggmap")
data(crime, package="ggmap")
locations <- filter(crime, offense='rape') %>%
select(date, offense, address, lon, lat)
locations <- filter(crime, offense='rape') %>% select(date, offense, address, lon, lat)
# Load Data
data(crime, package="ggmap")
locations <- filter(crime, offense =='rape') %>% select(date, offense, address, lon, lat)
head(crime)
locations <- filter(crime, offense =='rape') %>% select(date, offense, address, lon, lat)
locations <- filter(crime, crime$offense =='rape') %>% select(date, offense, address, lon, lat)
library(dplyr)
# Load Data
data(crime, package="ggmap")
head(crime)
locations <- filter(crime, crime$offense =='rape') %>% select(date, offense, address, lon, lat)
locations
head(locations)
register_google(key=my.key)
setwd("D:/ycData/Dropbox/teaching_this_semester/MSA8020_DataVisualization/2020 fall/Data/")
library("ggmap")
data(crime, package="ggmap")
# subset the data
library(dplyr)
rapes <- filter(crime, offense == "rape") %>%
select(date, offense, address, lon, lat)
# view data
head(rapes)
register_google(key = "your API key")
register_google(key=my.key)
my.key = "AIzaSyAYlABxxPJxY3yRFlBEoqCDIdeDxKD0-Xw"
register_google(key=my.key)
houston_center <- geocode("Houston", "TX")
houston_center <- geocode("Houston, TX")
print(houston_center)_
print(houston_center)
houston_map <- get_map(c(lon=houston_center$lon,
lat=houston_center$lat),
zoom=12, maptype="roadmap")
plt.show()
ggmap(houston_map)
ggmap(houston_map, base_layer=ggplot(data=rapes, aes(x=lon, y=lat)))
ggmap(houston_map, base_layer=ggplot(data=rapes, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
ggmap(houston_map, base_layer=ggplot(data=rapes, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
ggmap(houston_map, base_layer=ggplot(data=locations, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
ggmap(houston_map, base_layer=ggplot(data=locations, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
locations.shape
locations.dim
shape(locations)
describe(locations)
summary(locations)
houston_center <- geocode("Houston, TX")
lon.houston <- houston_center$lon
lat.houston <- houston_center$lat
houston_map <- get_map(c(lon=lon.houston, lat=lat.houston),
zoom=12, maptype="roadmap")
ggmap(houston_map)
ggmap(houston_map, base_layer=ggplot(data=locations, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
houston_map <- get_map(c(lon=lon.houston, lat=lat.houston),
zoom=20, maptype="roadmap")
se the map is not big enough'
ggmap(houston_map, base_layer=ggplot(data=locations, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
houston_map <- get_map(c(lon=lon.houston, lat=lat.houston),
zoom=5, maptype="roadmap")
ase the map is not big enough'
ggmap(houston_map, base_layer=ggplot(data=locations, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
houston_map <- get_map(c(lon=lon.houston, lat=lat.houston),
zoom=10, maptype="roadmap")
'Error: Remove 228 rows, becuase the map is not big enough'
ggmap(houston_map, base_layer=ggplot(data=locations, aes(x=lon, y=lat))) +
geom_point(color = "red", size = 3, alpha = 0.5)
help(get_map)
install.packages("acepack")
install.packages("choroplethrMaps")
require("acepack")
require("choroplethrMaps")
data(gapminder, package = "gapminder")
plotdata <- gapminder %>%
filter(year == 2007) %>%
rename(region = country, value = lifeExp) %>%
mutate(region = tolower(region))
install.packages("gapminder")
require("gapminder")
data(gapminder, package = "gapminder")
plotdata <- gapminder %>%
filter(year == 2007) %>%
rename(region = country, value = lifeExp) %>%
mutate(region = tolower(region))
#########################################################
# Tutorial #2 https://plotly.com/r/getting-started/
#########################################################
dev.off()
rm(list=ls())
library(plotly)
fig1 <- plot_ly(midwest, x=~percollege, color=~state, type='box')
fig1
fig1
# Render Plot in Browser By Printing Figure
print(fig1)
# Basic Scatter on Map Plot
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
fig <- plot_geo(df, lat = ~lat, lon = ~long)
fig <- fig %>% add_markers(
text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
)
fig <- fig %>% colorbar(title = "Incoming flights<br />February 2011")
fig <- fig %>% layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
fig
# Clear Namespace & Plots
rm(list=ls())
dev.off()
# Load Libraries
library(tidyr)
library(ggplot2)
library(corrplot)
# Declare Directories
dir.data <- 'C:\\Users\\chris.cirelli\\Desktop\\repositories\\gsu_fall_2020\\Visualizations\\hw3\\data'
# Load Data
setwd(dir.data)
df.raw <- read.csv(file ='Pisa scores 2013 - 2015 Data.csv', fileEncoding="UTF-8-BOM", na.strings = '..')
df.raw <- read.csv(file ='Pisa mean perfromance scores 2013 - 2015 Data.csv', fileEncoding="UTF-8-BOM", na.strings = '..')
df.raw
head(df.raw)
df.raw2 <- read.csv(file ='Pisa mean perfromance scores 2013 - 2015 Data.csv',na.strings = '..')
df.raw1 <- read.csv(file ='Pisa mean perfromance scores 2013 - 2015 Data.csv')
head(df.raw)
head(df.raw1)
head(df.raw2)
str(df.raw)
# Load Libraries
library(tidyverse)
install.packages("tidyverse")
# Load Libraries
library(tidyverse)
# Inspect Data
head(df.raw)
str(df.raw)
dim(df.raw)
df <- df.raw[1:1161, c(1, 4, 7)] #select relevant rows and cols
%>%  spread(key=Series.Code, value=X2015..YR2015.)
%>%  rename(Maths = LO.PISA.MAT,
Maths.F = LO.PISA.MAT.FE,
Maths.M = LO.PISA.MAT.MA,
Reading = LO.PISA.REA,
Reading.F = LO.PISA.REA.FE,
Reading.M = LO.PISA.REA.MA,
Science = LO.PISA.SCI,
Science.F = LO.PISA.SCI.FE,
Science.M = LO.PISA.SCI.MA
) %>%
drop_na()
# Data Clearning
df <- df.raw[1:1161, c(1, 4, 7)] #select relevant rows and cols
df <- df.raw[1:1161, c(1, 4, 7)] %>%
spread(key=Series.Code, value=X2015..YR2015.)
df <- df.raw[1:1161, c(1, 4, 7)] %>%
spread(key=Series.Code, value=X2015..YR2015.) %>%
rename(Maths = LO.PISA.MAT,
Maths.F = LO.PISA.MAT.FE,
Maths.M = LO.PISA.MAT.MA,
Reading = LO.PISA.REA,
Reading.F = LO.PISA.REA.FE,
Reading.M = LO.PISA.REA.MA,
Science = LO.PISA.SCI,
Science.F = LO.PISA.SCI.FE,
Science.M = LO.PISA.SCI.MA) %>%
drop_na()
view(df)
# Visualize Data
ggplot(data=df,aes(x=reorder(Country.Name,Maths),y=Maths)) +
geom_bar(stat ='identity',aes(fill=Maths))+
coord_flip() +
theme_grey() +
scale_fill_gradient(name="Maths Score Level")+
labs(title = 'Ranking of Countries by Maths Score',
y='Score',x='Countries')+
geom_hline(yintercept = mean(df$Maths),size = 1, color = 'blue')
df2 = df[,c(1,3,4,6,7,9,10)] %>%   # select relevant columns
pivot_longer(c(2,3,4,5,6,7),names_to = 'Score')
ggplot(data = df2, aes(x=Score,y=value, color=Score)) +
geom_boxplot()+
scale_color_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2))+
labs(title = 'Did males perform better than females?',
y='Scores',x='Test Type')
S = numeric(408)     # create an empty vector
for (i in 1:length(df2$Score)) {
S[i] = strsplit(df2$Score[i],".",fixed = TRUE)
}
df3 = S%>%unlist() %>% matrix(ncol = 2, byrow = TRUE)%>% as.data.frame()
view(df3)
df4 = cbind(df2,df3)
colnames(df4) = c('Country','Score','Value','Test','Gender')
df4$Score = NULL # since the 'Score' column is redundant
view(df4)
ggplot(data = df4, aes(x=Test,y=Value, fill=Test)) +
geom_boxplot()+
scale_fill_brewer(palette="Green") +
geom_jitter(shape=16, position=position_jitter(0.2))+
labs(title = 'Did males perform better than females?',
y='Scores',x='Test')+
facet_wrap(~Gender,nrow = 1)
df = df %>% mutate(Maths.Diff = ((Maths.M - Maths.F)/Maths.F)*100,
Reading.Diff = ((Reading.M - Reading.F)/Reading.F)*100,
Science.Diff = ((Science.M - Science.F)/Science.F)*100,
Total.Score = Maths + Reading + Science,
Avg.Diff = (Maths.Diff+Reading.Diff+Science.Diff)/3
)
view(df)
##### MATHS SCORE #####
ggplot(data=df, aes(x=reorder(Country.Name, Maths.Diff), y=Maths.Diff)) +
geom_bar(stat = "identity", aes(fill=Maths.Diff)) +
coord_flip() +
theme_light() +
geom_hline(yintercept = mean(df$Maths.Diff), size=1, color="black") +
scale_fill_gradient(name="% Difference Level") +
labs(title="Are Males better at math?", x="", y="% difference from female")
plot1 = ggplot(data=df, aes(x=reorder(Country.Name, Maths.Diff), y=Maths.Diff)) +
geom_bar(stat = "identity", aes(fill=Maths.Diff)) +
coord_flip() +
theme_light() +
geom_hline(yintercept = mean(df$Maths.Diff), size=1, color="black") +
labs(x="", y="Maths")+
scale_fill_gradient(name="% Difference Level", low = "red", high = "green")+
theme(legend.position = "none")
plot2 = ggplot(data=df, aes(x=reorder(Country.Name, Reading.Diff), y=Reading.Diff)) +
geom_bar(stat = "identity", aes(fill=Reading.Diff)) +
coord_flip() +
theme_light() +
geom_hline(yintercept = mean(df$Reading.Diff), size=1, color="black") +
labs(x="", y="Reading")+
scale_fill_gradient(name="% Difference Level", low = "red", high = "green") +
theme(legend.position = "none")
plot3 = ggplot(data=df, aes(x=reorder(Country.Name, Science.Diff), y=Science.Diff)) +
geom_bar(stat = "identity", aes(fill=Science.Diff)) +
coord_flip() +
theme_light() +
geom_hline(yintercept = mean(df$Science.Diff), size=1, color="black") +
labs(x="", y="Science")+
scale_fill_gradient(name="% Difference", low = "red", high = "green") +
theme(legend.position = "none")
install.packages('gridExtra')
library(gridExtra)
grid.arrange(plot1, plot2,plot3, nrow = 1,
top = 'Are Males better than Females?',
bottom = '% Difference from Females'
)
#nrow=1 means all the plots are placed in one row
